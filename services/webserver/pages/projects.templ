package pages

import (
	"personal-website/services/webserver/layouts"
	"personal-website/internal"
	"strings"
	"time"
)

type Projects struct {
	Pages []string
}

var projects = []internal.Project{
	{
		Date:  time.Date(2025, 3, 5, 0, 0, 0, 0, time.Local),
		Title: "Gleam Mobile Game",
		Description: `A mini-gacha rougelite game. 

        Created JS FFI bindings to nativescript core libraries. This allows compiling Gleam to mobile.

        Made a custom Elm-based mobile-game engine. It has two render functions: UI and game objects.

        The UI render function includes a simple 2D layout engine, primarily written in Gleam.

        The game object render function has more flexibility and maps closer to Three.js primitives.
        `,
		Lang: []string{"Gleam", "JavaScript"},
		WIP:  true,
	},
	{
		Date:  time.Date(2025, 2, 11, 0, 0, 0, 0, time.Local),
		Title: "Nix builder to wrap Erlang-target Gleam code",
		Url:   "https://github.com/ethanthoma/nix-gleam-burrito",
		Description: `A Nix flake that packages Gleam projects into a single, standalone executable. 

        The builder leverages the Burrito Elixir library, which lets users "compile" mix projects into a self-contained binary.

        To convert a Gleam project into a mix project, the builder injects a mix config and boilerplate application code. Then, the builder installs a plugin for compiling Gleam code.
		`,
		Lang: []string{"Nix"},
	},
	{
		Date:  time.Date(2025, 1, 25, 0, 0, 0, 0, time.Local),
		Title: "Canvas Group Quiz creation CLI in Gleam",
		Url:   "https://github.com/STASER-Lab/cgq",
		Description: `A command-line tool for the Canvas LMS that automates the creation of group-specific quizzes.
		
		Canvas doesn't allow educators to easily generate unique quizzes for different student groups, this tool does!`,
		Lang: []string{"Gleam"},
		WIP:  true,
	},
	{
		Date:  time.Date(2024, 12, 10, 0, 0, 0, 0, time.Local),
		Title: "Zig native WebGPU Voxel Render",
		Url:   "https://github.com/ethanthoma/graphics",
		Description: `An exploration into voxel 3D graphics programming using Zig and WebGPU.

        WebGPU is a modern graphics API. This project relies on bindings on the C headers for WebGPU.

        I (ab)use Zig's comptime to generate structs and other objects for my rendering logic.

        The rendering is mostly efficient, using compacted data structures. Chunking for voxels is also implemented.

        The main limitation on performance is that the application is single threaded.
		`,
		Lang: []string{"Zig"},
	},
	{
		Date:  time.Date(2024, 9, 11, 0, 0, 0, 0, time.Local),
		Title: "Interaction Nets in Odin",
		Url:   "https://github.com/ethanthoma/interaction-net",
		Description: `A runtime for Interaction Nets, a graph-based model of computation, written in Odin.

        Interaction nets are a (not-so) novel model of computation. It allows for high parallelism with ease.

        Most implementations of this model are pretty slow (save for HVM).

        I wanted to learn the Odin langauge (a systems language like C) and decided to build a HVM-based runtime.
		
		This project includes a basic tokenizer, parser, semantic checks, and runtime.`,
		Lang: []string{"Odin"},
	},
	{
		Date:  time.Date(2024, 7, 8, 0, 0, 0, 0, time.Local),
		Title: "zensor: a Zig tensor library",
		Url:   "https://github.com/ethanthoma/zensor",
		Description: `A tensor library for Zig that prioritizes correctness and compile-time safety.

        Comes with compile-time known tensor shapes and types, eliminating a class of runtime errors tensors normally have.

		Tensor operations are converted into an AST. They are only executed when needed (i.e. lazy).

        When executed, the AST is converted into IR. This IR gets JITed into x86 assembly, and then executed.

        This library is basically a fully custom compiler for tensors.
        `,
		Lang: []string{"Zig"},
		WIP:  true,
	},
}

templ (p Projects) View() {
	@layouts.Base{
		Pages:       p.Pages,
		PageCurrent: "projects",
		Title:       "Ethan Thoma \\ Projects",
	}.View() {
		<article class="row-start-1 col-[2/-2]">
			<h1 class="text-2xl font-extrabold tracking-tight leading-none border-b-2 border-black py-3xs">Projects</h1>
			<section class="py-s">
				<ol class="grid gap-y-m grid-cols-[1fr_1fr]">
					for _, project := range projects {
						@view_project(project)
					}
				</ol>
			</section>
			<script>
                function onToggle(href) {
                    if (event.target.open) { 
                        history.pushState(null, '', `#${href}`); 
                    } else if (window.location.hash === `#${href}`) {
                        history.pushState(null, '', window.location.pathname + window.location.search); 
                    }
                }
            </script>
		</article>
	}
}

templ view_project(project internal.Project) {
	<li class="col-span-2 [&_>*+*]:mx-3xs border-shadow border-1">
		<header class="flex col-span-2 justify-between bg-white border-black border-b-1 gap-s p-3xs">
			<h2 class="font-bold">
				{ project.Title }
			</h2>
			<time class="text-content/80">{ project.Date.Format("20060102") }</time>
		</header>
		<ol class="flex tracking-widest border-black border-dashed py-3xs border-b-1 gap-3xs">
			if project.WIP {
				<li class="inline-flex items-center text-black border-black border-1 bg-gold px-4xs py-6xs">
					<span>WIP</span>
				</li>
			}
			for _, lang := range project.Lang {
				<li class="inline-flex items-center bg-white border-black border-1 py-auto px-4xs">
					<span>{ strings.ToUpper(lang) } </span>
				</li>
			}
		</ol>
		{{ href := strings.Replace(project.Title, " ", "%20", -1) }}
		<details name="project" hx-trigger="toggle" hx-on:toggle={ templ.JSFuncCall("onToggle", href) }>
			<summary class="cursor-pointer hover:underline active:underline ml-[1px] py-3xs">
				Project Overview
			</summary>
			<p id={ href } class="py-3xs mb-3xs">
				@templ.Raw(strings.ReplaceAll(project.Description, "\n", "<br>"))
			</p>
		</details>
		if project.Url != "" {
			<div class="pb-3xs">
				<a
					class="inline-flex items-center font-extrabold text-white border-black hover:underline active:underline border-1 w-fit gap-[0.2em] px-xs py-5xs bg-orange hover:bg-blue"
					href={ templ.URL(project.Url) }
				>
					GitHub
					<svg class="ml-0.5 w-3 h-3 mr-[-2px]" fill="currentColor" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M14 2.5a.5.5 0 0 0-.5-.5h-6a.5.5 0 0 0 0 1h4.793L2.146 13.146a.5.5 0 0 0 .708.708L13 3.707V8.5a.5.5 0 0 0 1 0v-6z"></path> </svg>
				</a>
			</div>
		}
	</li>
}
