package pages

import "personal-website/services/webserver/layouts"

type Projects struct {
	Pages []string
}

type Project struct {
	date, title, url, description string
}

templ (project Project) view(last bool) {
	<li class="relative grid grid-cols-subgrid col-span-3">
		<div class="col-[1] py-2xs relative">
			<time class="bg-base py-2xs">{ project.date }</time>
			if !last {
				<div class="border-e [z-index:-1] border-content/20 h-full my-m w-1/2 absolute inset-0"></div>
			}
		</div>
		<span class="col-[2] p-2xs">-</span>
		if project.description != "" {
			<a
				class="col-[3] p-2xs rounded-md w-fit relative bg-white border-shadow border-[1px] transition-all duration-200 ease-in-out hover:shadow-shadow hover:shadow-[3px_3px_0px_shadow]"
				href={ templ.URL(project.url) }
			>
				<h3 class="underline hover:text-blue p-name">{ project.title }</h3>
				<p>{ project.description }</p>
				<svg aria-hidden="true" class="pointer-events-none absolute inset-0 h-full w-full fill-blue/50 stroke-blue/50 opacity-20 [mask-image:linear-gradient(to_top,_#ffffffad,_transparent)]" style="visibility: visible;">
					<defs>
						<pattern id=":R4foqfknq6ja:" width="13" height="13" patternUnits="userSpaceOnUse" x="-1" y="-1">
							<path d="M.5 13V.5H13" fill="none" stroke-dasharray="0"></path>
						</pattern>
					</defs>
					<rect width="100%" height="100%" stroke-width="0" fill="url(#:R4foqfknq6ja:)"></rect>
				</svg>
			</a>
		} else {
			<a
				class="col-[3] p-2xs rounded-md w-fit underline hover:text-blue hover:bg-content/5"
				href={ templ.URL(project.url) }
			><h3 class="p-name">{ project.title }</h3></a>
		}
	</li>
}

var projects = []Project{
	{
		date:        "20250211",
		title:       "Nix builder to wrap Erlang-target Gleam code",
		url:         "https://github.com/ethanthoma/nix-gleam-burrito",
		description: "This is incredibly cursed...",
	},
	{
		date:        "20250202",
		title:       "effect: Gleam library for handling side effects",
		url:         "https://github.com/ethanthoma/effect",
		description: "",
	},
	{
		date:        "20250128",
		title:       "trellis: simple Gleam library for pretty printing tables",
		url:         "https://github.com/ethanthoma/trellis",
		description: "",
	},
	{
		date:        "20250125",
		title:       "Canvas Group Quiz creation CLI in Gleam",
		url:         "https://github.com/STASER-Lab/cgq",
		description: "",
	},
	{
		date:        "20241210",
		title:       "Zig native WebGPU Voxel Render",
		url:         "https://github.com/ethanthoma/graphics",
		description: "",
	},
	{
		date:        "20240911",
		title:       "Interaction Nets in Odin",
		url:         "https://github.com/ethanthoma/interaction-net",
		description: "With a bespoke MPMC concurrent queue!",
	},
	{
		date:        "20240719",
		title:       "Zig Webgpu Compute Shader",
		url:         "https://github.com/ethanthoma/zig-webgpu-compute-shader",
		description: "",
	},
	{
		date:        "20240708",
		title:       "Zensor: a Zig tensor library",
		url:         "https://github.com/ethanthoma/zensor",
		description: "Very WIP but has some handrolled assembly...",
	},
}

templ (p Projects) View() {
	@layouts.Base{
		Pages:       p.Pages,
		PageCurrent: "projects",
		Title:       "Ethan Thoma \\ Projects",
	}.View() {
		<article class="relative border-2 p-xs-s">
			<h1 class="absolute -top-xs bg-base px-xs mx-3xs text-2xl font-extrabold leading-none tracking-tight">Projects</h1>
			<ol class="mt-m gap-y-m grid grid-cols-[min-content_min-content_1fr]">
				for i, project := range projects {
					@project.view(i == len(projects)-1)
				}
			</ol>
		</article>
	}
}
