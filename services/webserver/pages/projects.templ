package pages

import (
	"personal-website/services/webserver/layouts"
	"personal-website/internal"
	"strings"
	"time"
)

type Projects struct {
	Pages []string
}

var projects = []internal.Project{
	{
		Date:  time.Date(2025, 3, 5, 0, 0, 0, 0, time.Local),
		Title: "Gleam Mobile Game",
		Description: `An Elm-based game engine written and game. 

		The engine has bindings for Three.js and uses nativescript for mobile.`,
		Lang: []string{"Gleam", "JavaScript"},
	},
	{
		Date:  time.Date(2025, 2, 11, 0, 0, 0, 0, time.Local),
		Title: "Nix builder to wrap Erlang-target Gleam code",
		Url:   "https://github.com/ethanthoma/nix-gleam-burrito",
		Description: `A Nix flake that packages Gleam projects into a single, standalone executable. 

		This builder injects a mix config into the Gleam project and uses the Burrito Elixir library to compile the code and all of its Erlang/Elixir dependencies into a self-contained binary.`,
		Lang: []string{"Nix"},
	},
	{
		Date:  time.Date(2025, 1, 25, 0, 0, 0, 0, time.Local),
		Title: "Canvas Group Quiz creation CLI in Gleam",
		Url:   "https://github.com/STASER-Lab/cgq",
		Description: `A command-line tool for the Canvas LMS that automates the creation of group-specific quizzes.
		
		Canvas doesn't allow educators to easily generate unique quizzes for different student groups, this tool does!`,
		Lang: []string{"Gleam"},
	},
	{
		Date:  time.Date(2024, 12, 10, 0, 0, 0, 0, time.Local),
		Title: "Zig native WebGPU Voxel Render",
		Url:   "https://github.com/ethanthoma/graphics",
		Description: `An exploration into voxel 3D graphics programming using Zig and WebGPU.
		
		I use Zig's comptime capabilities for compile-time generation of rendering logic and uses an instance buffer to efficiently render voxel chunks.`,
		Lang: []string{"Zig"},
	},
	{
		Date:  time.Date(2024, 9, 11, 0, 0, 0, 0, time.Local),
		Title: "Interaction Nets in Odin",
		Url:   "https://github.com/ethanthoma/interaction-net",
		Description: `A runtime for Interaction Nets, a graph-based model of computation, written in Odin.
		
		I wanted to learn the Odin language and how interaction nets work. A two for one.`,
		Lang: []string{"Odin"},
	},
	{
		Date:  time.Date(2024, 7, 8, 0, 0, 0, 0, time.Local),
		Title: "zensor: a Zig tensor library",
		Url:   "https://github.com/ethanthoma/zensor",
		Description: `A tensor library for Zig that prioritizes correctness and compile-time safety. Comes with compile-time known tensor shapes and types, eliminating a class of runtime errors tensors normally have.

		Tensor operations are converted into an AST, compiled into an intermediate representation, and then executed. It also features a work-in-progress (handmade) JIT compiler for x86.`,
		Lang: []string{"Zig"},
	},
}

templ (p Projects) View() {
	@layouts.Base{
		Pages:       p.Pages,
		PageCurrent: "projects",
		Title:       "Ethan Thoma \\ Projects",
	}.View() {
		<article class="row-start-1 self-start col-[2/-2]">
			<h1 class="text-2xl font-extrabold tracking-tight leading-none">Projects</h1>
			<ol class="grid mt-m gap-y-m grid-cols-[1fr_1fr]">
				for i, project := range projects {
					@view_project(project, i == len(projects)-1)
				}
			</ol>
		</article>
	}
}

templ view_project(project internal.Project, last bool) {
	<li class="col-span-2 bg-white border-2 border-black shadow-shadow shadow-[4px_4px_0_0]">
		<header class="flex col-span-2 justify-between bg-white border-b-2 border-black gap-s p-3xs">
			<h2 class="font-bold">
				{ project.Title }
			</h2>
			<time class="text-content/80">{ project.Date.Format("20060102") }</time>
		</header>
		<div class="grid bg-base/80">
			<ol class="flex tracking-widest p-4xs-3xs gap-3xs">
				if project.Url != "" {
					<li>
						<a
							class="inline-flex items-center font-extrabold text-white underline border-2 border-black gap-[0.1em] px-4xs py-5xs bg-orange hover:bg-blue"
							href={ templ.URL(project.Url) }
						>
							GitHub
							<svg class="ml-0.5 w-3 h-3" fill="currentColor" viewBox="0 0 16 16">
								<path fill-rule="evenodd" d="M14 2.5a.5.5 0 0 0-.5-.5h-6a.5.5 0 0 0 0 1h4.793L2.146 13.146a.5.5 0 0 0 .708.708L13 3.707V8.5a.5.5 0 0 0 1 0v-6z"></path>
							</svg>
						</a>
					</li>
				}
				for _, lang := range project.Lang {
					<li class="inline-flex items-center bg-white border-2 border-black py-auto px-4xs">
						<span>{ strings.ToUpper(lang) } </span>
					</li>
				}
			</ol>
			<p class="p-3xs">
				@templ.Raw(strings.ReplaceAll(project.Description, "\n", "<br>"))
			</p>
		</div>
	</li>
}
